#!/bin/sh

# Copyright (C) 2010, Steffen Knollmann
# Released under the terms of the GNU General Public License version 3.
# This file is part of `ginnungagap'.

# Get a bunch of informative things
if test -e version.h
then
	PROPER_VERSION_INFO="yes"
	VERSIONFILE=version.h
else
	PROPER_VERSION_INFO="no"
	VERSIONFILE=version.h.in
fi
PACKAGE_NAME=`  grep 'define PACKAGE_NAME' $VERSIONFILE \
              | awk '{print $3}' | sed s/\"//g`
PACKAGE_OWNER=`  grep 'define PACKAGE_OWNER' $VERSIONFILE \
              | awk -F\" '{print $2}'`
PACKAGE_BUG_EMAIL=`  grep 'define PACKAGE_BUG_EMAIL' $VERSIONFILE \
                   | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MAJOR=`  grep 'define PACKAGE_VERSION_MAJOR' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MINOR=`  grep 'define PACKAGE_VERSION_MINOR' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MICRO=`  grep 'define PACKAGE_VERSION_MICRO' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`

# Initialise the options
TOOLCHAIN=gnu
WITH_OPENMP=false
WITH_MPI=false
ENABLE_FFT_BACKEND=fftw3
WITH_SILO=false
WITH_SILO_LIBS=auto
WITH_PROC_DIR=false
ENABLE_DOUBLE=true
ENABLE_DEBUG=false
ENABLE_PROFILE=false
SHOW_HELP=false
SHOW_VERSION=false
NDIM_VALUE=3
WITH_GSL_LIBS=auto

# Parse the options
for ac_option
do
	case $ac_option in
		*=*)  ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
		*)    ac_optarg=yes ;;
	esac

	case $ac_option in
		--toolchain)
			echo -n "Error: --toolchain requires an argument; "
			echo "use, e.g., --toolchain=gnu"
			exit 1
			;;
		--toolchain=*)
			TOOLCHAIN=$ac_optarg
			;;
		--with-openmp | --with-openmp=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_OPENMP=true
			else
				WITH_OPENMP=false
			fi
			;;
		--without-openmp)
			WITH_OPENMP=false
			;;
		--with-mpi | --with-mpi=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_MPI=true
				WITH_MPICC=mpicc
			elif test "x$ac_optarg" = "xno"
			then
				WITH_MPI=false
				WITH_MPICC=""
			else
				WITH_MPI=true
				WITH_MPICC=$ac_optarg
			fi
			;;
		--without-mpi | --without-mpi=*)
			WITH_MPI=false
			;;
		--with-gsl-libs)
			echo "Error:  --with-gsl-libs requires an argument."
			exit 1
			;;
		--with-gsl-libs=*)
			WITH_GSL_LIBS="$ac_optarg"
			;;
		--with-silo | --with-silo=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_SILO=true
			elif test "x$ac_optarg" = "xno"
			then
				WITH_SILO=false
			else
				WITH_SILO=true
			fi
			;;
		--without-silo | --without-silo=*)
			WITH_SILO=false
			;;
		--with-silo-libs)
			echo "Error:  --with-silo-libs requires an argument."
			exit 1
			;;
		--with-silo-libs=*)
			WITH_SILO_LIBS="$ac_optarg"
			;;
		--with-proc-dir | --with-proc-dir=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_PROC_DIR=true
			elif test "x$ac_optarg" = "xno"
			then
				WITH_PROC_DIR=false
			else
				WITH_PROC_DIR=true
			fi
			;;
		--without-proc-dir | --without-proc-dir=*)
			WITH_PROC_DIR=false
			;;
		--enable-fft-backend)
			echo "Error:  --enable-fft-backend requires an argument."
			exit 1
			;;
		--enable-fft-backend=*)
			if test "x$ac_optarg" = "xfftw3"
			then
				FFT_BACKEND=fftw3
			elif test "x$ac_optarg" = "xfftw2"
			then
				FFT_BACKEND=fftw2
			else
				echo "Error:  Unkown argument for --enable-fft-backend."
				exit 1
			fi
			;;
		--enable-double | --enable-double=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_DOUBLE=true
			else
				ENABLE_DOUBLE=false
			fi
			;;
		--disable-double | --disable-double=*)
			ENABLE_DOUBLE=false
			;;
		--enable-debug | --enable-debug=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_DEBUG=true
			else
				ENABLE_DEBUG=false
			fi
			;;
		--disable-debug | --disable-debug=*)
			ENABLE_DEBUG=false
			;;
		--enable-profile | --enable-profile=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_PROFILE=true
			else
				ENABLE_PROFILE=false
			fi
			;;
		--disable-profile | --disable-debug=*)
			ENABLE_PROFILE=false
			;;
		--ndim)
			echo -n "Error:  --ndim requires an argumet; "
			echo "use either --ndim=2 or --ndim=3"
			exit 1
			;;
		--ndim=*)
			if test "x$ac_optarg" = "x3"
			then
				NDIM_VALUE=3
			elif test "x$ac_optarg" = "x2"
			then
				NDIM_VALUE=2
			else
				echo -n "Error:  --ndim accepts only 2 and 3 "
				echo "as arguments"
				exit 1
			fi
			;;
		-h | --help*)
			SHOW_HELP=true
			;;
		-V | --version*)
			SHOW_VERSION=true
			;;
		-* | --*)
			echo "Unknown option $ac_option."
			echo "Try \`$0 --help' to get a list of allowed options."
			exit 1
			;;
		*)
			echo "Unknown parameter $ac_option"
			echo "Try \`$0 --help' to get a list of allowed options."
			exit 1
			;;
	esac
done

# Print the help screen and exit, if requested
if test "x$SHOW_HELP" = "xtrue"
then
	cat <<_HELP_EOF
\`configure' offers an easy way to configure the features and the build
system of $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO-r$PACKAGE_VERSION_REVISION.

This script will use the distributed Makefile.config.in and config.h.in
to generate the actual Makefile.config and config.h, respectively.

Usage: $0 [OPTION]... [VAR=VALUE]

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help      Print this help screen.
  -V, --version   Print a version info and exit.

Build options:
  --toolchain[=TOOLCHAIN]  Sets the toolchain used to build $PACKAGE_NAME.
                           This defaults to \`gnu', using gcc, ld and ar.
                           Another option is to specify \`intel', then
                           icc, xild and xiar are used in the toolchain.
                           You can define further toolchains by
                           modifying Makefile.config.in accordingly.
                           Please note the comment at the end of this
                           help screen concerning environment variables.

Optional features:
  --with-FEATURE[=ARG]     Use FEATURE. [ARG=yes]
  --without-FEATURE        Do not use FEATURE.  This is the same as
                           --with-FEATURE=no.
  --with-mpi[=COMPILER]    Use MPI [COMPILER=mpicc].  Note that if you
                           use MPI, it is your duty to make sure that
                           mpicc uses a C compiler that fits to your
                           selected toolchain.  Default: no.
  --with-openmp            Uses the OpenMP directives.  Default: no.
  --with-gsl-libs=LIBS     This may be used to set specific libraries of
                           GSL, normally it should not be neccessary to
                           use this, as by default the right libraries
                           will be queried with gsl-config.
  --with-silo              Use the SILO library to write visualisation
                           outputs.  Default: no.
  --with-silo-libs=LIBS    This can be used to specify the required
                           libraries for using Silo.  If Silo is
                           actually used, it defaults to:
                             -lsiloh5 -lhdf5 -lstdc++ -lz
                           For a non-HDF5 version of Silo, that should
                           look different though.  Note that it is
                           recommended to use the HDF5 version of Silo
                           anyways, so this option should not be needed
                           in most situations.
  --with-proc-dir          If the code can use /proc/self/statm to query
                           its memory usage (true at least on Linux),
                           the you may use this option to allow the code
                           to retrieve memory information at runtime.
                           Default: no.


Code properties:
  --enable-FEATURE[=ARG]   Switch on a feature. [ARG=YES]
  --disable-FEATURE        Do not use FEATURE.  This is the same as
                           --enable-FEATURE=no.
  --enable-fft-backend=ARG This selects the FFT backend that will be
                           used.  Possible options are (note that single
                           and double precision versions are required):
                             fftw2       Version 2 of FFTW
                             fftw3  (*)  Version 3 of FFTW
                           The default choice is marked.
  --enable-double          This switches on the usage of double
                           precision floating point variables instead of
                           single precision for fields and particle
                           properties.  Default: yes.
  --ndim=VALUE             Sets the dimensionality of the code.  Allowed
                           values are 2 and 3.  Default: 3.

Extra features:
  --enable-debug           Activates the debugging flags and forces the
                           compiler flags to build debugging symbols.
                           Default: no.
  --enable-profile         Will built the code with profiling output for
                           usage with performance analysis tools.
                           Default: no.

Some influential environment variables:
  CC          The C compiler to use.
  CFLAGS      C compiler flags.
  CPPFLAGS    Additional directives for the preprocessor, e.g.
              \`-L/opt/include'
  DEPCC       This is the C preprocessor that will be used to
              auto-generate dependencies.  No code will be generated
              with that compiler!
  LD          The linker.
  LDFLAGS     Flags required to find libraries, e.g. \`-L/opt/lib'
  AR          The archiver.
  MAKE        The make command that will be used.

Note that theses variables are set by selecting a specific toolchain.
You can use these variables to override the choices made by \`configure'
or to help it to find libraries and programs with nonstandard
names/locations.

Please report bugs to $PACKAGE_BUG_EMAIL.

_HELP_EOF
	exit 0
fi

# Print the version screen and exit, if requested
if test "x$SHOW_VERSION" = "xtrue"
then
	cat <<_VERSION_EOF
This is $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO
Copyright (C) 2010, $PACKAGE_OWNER

This is free software; see the attached COPYING document for copying
conditions.  There is NO warranty; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PUSPOSE.

Please send bugreports to $PACKAGE_BUG_EMAIL

_VERSION_EOF
	exit 0
fi

# Now set all the deferred libaries
if test "x$WITH_GSL_LIBS" = "xauto"
then
	WITH_GSL_LIBS=`gsl-config --libs`
fi
if test "x$WITH_SILO_LIBS" = "xauto"
then
	WITH_SILO_LIBS="-lsiloh5 -lhdf5 -lstdc++ -lz"
fi

# Now lets actually do something.

# Say hello
echo "Configuring $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO" | tee config.log

# Generate Makefile.config
echo -n "\to generating \`Makefile.config'... " | tee -a config.log
echo "# Makefile.config generated from Makefile.config.in by configure" > Makefile.config
echo "" >> Makefile.config
cat Makefile.config.in >> Makefile.config
sed -i s/__TOOLCHAIN__/$TOOLCHAIN/ Makefile.config
if test "x$WITH_OPENMP" = "xtrue"
then
	sed -i s/__WITH_OPENMP__/true/ Makefile.config
else
	sed -i s/__WITH_OPENMP__/false/ Makefile.config
fi
if test "x$WITH_MPI" = "xtrue"
then
	sed -i s/__WITH_MPI__/true/ Makefile.config
	sed -i s/__MPICC__/$WITH_MPICC/ Makefile.config
else
	sed -i s/__WITH_MPI__/false/ Makefile.config
	sed -i s/__MPICC__// Makefile.config
fi
if test "x$WITH_SILO" = "xtrue"
then
	sed -i s/__WITH_SILO__/true/ Makefile.config
else
	sed -i s/__WITH_SILO__/false/ Makefile.config
fi
if test "x$ENABLE_DEBUG" = "xtrue"
then
	sed -i s/__ENABLE_DEBUG__/true/ Makefile.config
else
	sed -i s/__ENABLE_DEBUG__/false/ Makefile.config
fi
if test "x$ENABLE_DOUBLE" = "xtrue"
then
	sed -i s/__ENABLE_DOUBLE__/true/ Makefile.config
else
	sed -i s/__ENABLE_DOUBLE__/false/ Makefile.config
fi
if test "x$ENABLE_PROFILE" = "xtrue"
then
	sed -i s/__ENABLE_PROFILE__/true/ Makefile.config
else
	sed -i s/__ENABLE_PROFILE__/false/ Makefile.config
fi
sed -i -e "s@__ENABLE_FFT_BACKEND__@$ENABLE_FFT_BACKEND@" Makefile.config
sed -i -e "s@__CC__@$CC@" Makefile.config
sed -i -e "s@__CFLAGS__@$CFLAGS@" Makefile.config
sed -i -e "s@__CPPFLAGS__@$CPPFLAGS@" Makefile.config
sed -i -e "s@__DEPCC__@$DEPCC@" Makefile.config
sed -i -e "s@__LD__@$LD@" Makefile.config
sed -i -e "s@__LDFLAGS__@$LDFLAGS@" Makefile.config
sed -i -e "s@__AR__@$AR@" Makefile.config
sed -i -e "s@__MAKE__@$MAKE@" Makefile.config
sed -i -e "s@__WITH_GSL_LIBS__@$WITH_GSL_LIBS@" Makefile.config
sed -i -e "s@__WITH_SILO_LIBS__@$WITH_SILO_LIBS@" Makefile.config
echo "done" | tee -a config.log


# Generate config.h
echo -n "\to generating \`config.h'... " | tee -a config.log
echo "/* config.h generated from config.h.in by configure */" > config.h
echo "" >> config.h
cat config.h.in >> config.h
if test "x$WITH_OPENMP" = "xtrue"
then
	sed -i -e 's/undef WITH_OPENMP/define WITH_OPENMP 1/' config.h
fi
if test "x$WITH_MPI" = "xtrue"
then
	sed -i -e 's/undef WITH_MPI/define WITH_MPI 1/' config.h
fi
if test "x$WITH_SILO" = "xtrue"
then
	sed -i -e 's/undef WITH_SILO/define WITH_SILO 1/' config.h
fi
if test "x$WITH_PROC_DIR" = "xtrue"
then
	sed -i -e 's/undef WITH_PROC_DIR/define WITH_PROC_DIR 1/' config.h
fi
if test "x$ENABLE_DEBUG" = "xtrue"
then
	sed -i -e 's/undef ENABLE_DEBUG/define ENABLE_DEBUG 1/' config.h
fi
if test "x$ENABLE_DOUBLE" = "xtrue"
then
	sed -i -e 's/undef ENABLE_DOUBLE/define ENABLE_DOUBLE 1/' config.h
fi
if test "x$ENABLE_FFT_BACKEND" = "xfftw2"
then
	sed -i -e 's/undef ENABLE_FFT_BACKEND_FFTW2/define ENABLE_FFT_BACKEND_FFTW2 1/' config.h
elif test "x$ENABLE_FFT_BACKEND" = "xfftw3"
then
	sed -i -e 's/undef ENABLE_FFT_BACKEND_FFTW3/define ENABLE_FFT_BACKEND_FFTW3 1/' config.h
fi
sed -i -e "s@__NDIM_VALUE__@$NDIM_VALUE@" config.h
echo "done" | tee -a config.log


# Summarize the configuration
echo "" | tee -a config.log
echo "Summary" | tee -a config.log
echo "\to features in use/code properties:" | tee -a config.log
grep '#define' config.h \
	| grep -v CONFIG_H \
	| awk '{print "\t\t"$2"\t"$3}' \
	| tee -a config.log

echo "\to features NOT in use:" | tee -a config.log
grep '#undef' config.h | awk '{print "\t\t"$2}' | tee -a config.log

echo "\to programs and program options:" | tee -a config.log
cat <<_BLA_EOF >> bla.$$
include Makefile.config

.PHONY: check

check:
	@echo "\t\tCC       = \$(CC)"
	@echo "\t\tCFLAGS   = \$(CFLAGS)"
	@echo "\t\tCPPFLAGS = \$(CPPFLAGS)"
	@echo "\t\tDEPCC    = \$(DEPCC)"
	@echo "\t\tLD       = \$(LD)"
	@echo "\t\tLDFLAGS  = \$(LDFLAGS)"
	@echo "\t\tLIBS     = \$(LIBS)"
	@echo "\t\tAR       = \$(AR)"
	@echo "\t\tMAKE     = \$(MAKE)"
_BLA_EOF
make -f bla.$$ check | tee -a config.log
rm -f bla.$$
echo ""
cat <<_END_EOF
To build $PACKAGE_NAME, run \`make all'.
To generate the code documention execute \`make doc'.

Have a lot of fun!
_END_EOF
