# Copyright (C) 2009, 2010, Steffen Knollmann
#
# This file is part of `ginnungagap'.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# We first deal with the installation directories.
# Gives the prefix into which the install is performed
PREFIX = __PREFIX__
# Same.
EPREFIX = __EPREFIX__
# Executables
BINDIR = __BINDIR__

# Select the used toolchain to generate the objects, executables, etc.
# You can select a variety of predefined toolchains (see the end of the
# comment for a list), but you can also define your own name, provided
# that you implement it accordingly at the end of this file.  The
# toolchain will set the following variables:
#   CC    :  This is the C compiler to use.
#   CFLAGS:  Special flags for the C compiler can be set here.
#   DEPCC:   This is a C Preprocessor that will be used to
#            auto-generate dependencies, it is a safe bet to use gcc
#            for that.  No code will be generated with that compiler!
#   LD   :   The linker.
#   AR   :   The archiver.
#   MAKE :   The make command that will be used.
# Note that by defining any of those variables during the run of the
# configure script, the toolchain variables will be overwritten with the
# command line variables.  The exception to this is CFLAGS: the user
# can specify specific flags and the ones required by the toolchain will
# be appended to those at the end.
TOOLCHAIN = "__TOOLCHAIN__"

# Features that influence the choices need to be made in the toolchains
WITH_OPENMP = "__WITH_OPENMP__"
WITH_MPI = "__WITH_MPI__"
MPICC = __MPICC__
WITH_SPRNG = "__WITH_SPRNG__"
WITH_SPRNG_PREFIX = "__WITH_SPRNG_PREFIX__"
WITH_SPRNG_INC_DIR = "__WITH_SPRNG_INC_DIR__"
WITH_SPRNG_LIB_DIR = "__WITH_SPRNG_LIB_DIR__"
WITH_FFT = "__WITH_FFT__"
WITH_FFT_PREFIX = "__WITH_FFT_PREFIX__"
WITH_FFT_INC_DIR = "__WITH_FFT_INC_DIR__"
WITH_FFT_LIB_DIR = "__WITH_FFT_LIB_DIR__"
WITH_SILO = "__WITH_SILO__"
WITH_SILO_PREFIX = "__WITH_SILO_PREFIX__"
WITH_SILO_INC_DIR = "__WITH_SILO_INC_DIR__"
WITH_SILO_LIB_DIR = "__WITH_SILO_LIB_DIR__"
WITH_HDF5 = "__WITH_HDF5__"
WITH_HDF5_PREFIX = "__WITH_HDF5_PREFIX__"
WITH_HDF5_INC_DIR = "__WITH_HDF5_INC_DIR__"
WITH_HDF5_LIB_DIR = "__WITH_HDF5_LIB_DIR__"
WITH_GSL_PREFIX = "__WITH_GSL_PREFIX__"
WITH_GSL_INC_DIR = "__WITH_GSL_INC_DIR__"
WITH_GSL_LIB_DIR = "__WITH_GSL_LIB_DIR__"
WITH_MPITRACE = "__WITH_MPITRACE__"
WITH_MPITRACE_DIR = "__WITH_MPITRACE_DIR__"
ENABLE_DEBUG = "__ENABLE_DEBUG__"
ENABLE_DOUBLE = "__ENABLE_DOUBLE__"
ENABLE_PROFILE = "__ENABLE_PROFILE__"

# Set the important variables to what the user wishes.  If any of these
# is set, the toolchain segment will not touch its value.  The exception
# is CFLAGS, here the toolchain will append the toolchain-specifc values
# to the ones the user specified.  Also, if the user specified any
# directory for the libraries then the according things are added to
# CPPFLAGS and LDFLAGS.
CC = __CC__
CFLAGS = __CFLAGS__
CPPFLAGS = __CPPFLAGS__
DEPCC = __DEPCC__
LD = __LD__
LDFLAGS = __LDFLAGS__
AR = __AR__
MAKE = __MAKE__

# Deals with the include/lib dir for SPRNG
ifeq ($(WITH_SPRNG), "true")
  ifneq ($(WITH_SPRNG_PREFIX), "auto")
    ifeq ($(WITH_SPRNG_INC_DIR), "auto")
      WITH_SPRNG_INC_DIR = $(WITH_SPRNG_PREFIX)/include
    endif
    CPPFLAGS += -I$(WITH_SPRNG_INC_DIR)
    ifeq ($(WITH_SPRNG_LIB_DIR), "auto")
      WITH_SPRNG_LIB_DIR = $(WITH_SPRNG_PREFIX)/lib
    endif
    LDFLAGS += -L$(WITH_SPRNG_LIB_DIR)
  else
    ifneq ($(WITH_SPRNG_INC_DIR), "auto")
      CPPFLAGS += -I$(WITH_SPRNG_INC_DIR)
    endif
    ifneq ($(WITH_SPRNG_LIB_DIR), "auto")
      LDFLAGS += -L$(WITH_SPRNG_LIB_DIR)
    endif
  endif
else
  WITH_SPRNG_PREFIX = 
  WITH_SPRNG_INC_DIR = 
  WITH_SPRNG_LIB_DIR = 
endif

# Deals with the include/lib dir for the FFT library
ifneq ($(WITH_FFT_PREFIX), "auto")
  ifeq ($(WITH_FFT_INC_DIR), "auto")
    WITH_FFT_INC_DIR = $(WITH_FFT_PREFIX)/include
  endif
  CPPFLAGS += -I$(WITH_FFT_INC_DIR)
  ifeq ($(WITH_FFT_LIB_DIR), "auto")
    WITH_FFT_LIB_DIR = $(WITH_FFT_PREFIX)/lib
  endif
  LDFLAGS += -L$(WITH_FFT_LIB_DIR)
else
  ifneq ($(WITH_FFT_INC_DIR), "auto")
    CPPFLAGS += -I$(WITH_FFT_INC_DIR)
  endif
  ifneq ($(WITH_FFT_LIB_DIR), "auto")
    LDFLAGS += -L$(WITH_FFT_LIB_DIR)
  endif
endif

# Deals with the include/lib dir for SILO
ifeq ($(WITH_SILO), "true")
  ifneq ($(WITH_SILO_PREFIX), "auto")
    ifeq ($(WITH_SILO_INC_DIR), "auto")
      WITH_SILO_INC_DIR = $(WITH_SILO_PREFIX)/include
    endif
    CPPFLAGS += -I$(WITH_SILO_INC_DIR)
    ifeq ($(WITH_SILO_LIB_DIR), "auto")
      WITH_SILO_LIB_DIR = $(WITH_SILO_PREFIX)/lib
    endif
    LDFLAGS += -L$(WITH_SILO_LIB_DIR)
  else
    ifneq ($(WITH_SILO_INC_DIR), "auto")
      CPPFLAGS += -I$(WITH_SILO_INC_DIR)
    endif
    ifneq ($(WITH_SILO_LIB_DIR), "auto")
      LDFLAGS += -L$(WITH_SILO_LIB_DIR)
    endif
  endif
else
  WITH_SILO_PREFIX = 
  WITH_SILO_INC_DIR =
  WITH_SILO_LIB_DIR = 
endif

# Deals with the include/lib dir for HDF5
ifeq ($(WITH_HDF5), "true")
  ifneq ($(WITH_HDF5_PREFIX), "auto")
    ifeq ($(WITH_HDF5_INC_DIR), "auto")
      WITH_HDF5_INC_DIR = $(WITH_HDF5_PREFIX)/include
    endif
    CPPFLAGS += -I$(WITH_HDF5_INC_DIR)
    ifeq ($(WITH_HDF5_LIB_DIR), "auto")
      WITH_HDF5_LIB_DIR = $(WITH_HDF5_PREFIX)/lib
    endif
    LDFLAGS += -L$(WITH_HDF5_LIB_DIR)
  else
    ifneq ($(WITH_HDF5_INC_DIR), "auto")
      CPPFLAGS += -I$(WITH_HDF5_INC_DIR)
    endif
    ifneq ($(WITH_HDF5_LIB_DIR), "auto")
      LDFLAGS += -L$(WITH_HDF5_LIB_DIR)
    endif
  endif
else
  WITH_HDF5_PREFIX =
  WITH_HDF5_INC_DIR = 
  WITH_HDF5_LIB_DIR =
endif

# Deals with the include/lib dir for GSL
ifneq ($(WITH_GSL_PREFIX), "auto")
  ifeq ($(WITH_GSL_INC_DIR), "auto")
    WITH_GSL_INC_DIR = $(WITH_GSL_PREFIX)/include
  endif
  CPPFLAGS += -I$(WITH_GSL_INC_DIR)
  ifeq ($(WITH_GSL_LIB_DIR), "auto")
    WITH_GSL_LIB_DIR = $(WITH_GSL_PREFIX)/lib
  endif
  LDFLAGS += -L$(WITH_GSL_LIB_DIR)
else
  ifneq ($(WITH_GSL_INC_DIR), "auto")
    CPPFLAGS += -I$(WITH_GSL_INC_DIR)
  endif
  ifneq ($(WITH_GSL_LIB_DIR), "auto")
    LDFLAGS += -L$(WITH_GSL_LIB_DIR)
  endif
endif

# Deals with the include/lib dir for MPITrace
ifneq ($(WITH_MPITRACE_DIR), "auto")
  CPPFLAGS += -I$(WITH_MPITRACE_DIR)/include
  LDFLAGS += -L$(WITH_MPITRACE_DIR)/lib
endif

# Do all the libraries
LIBS =
ifeq ($(WITH_SPRNG), "true")
  LIBS += __WITH_SPRNG_LIBS__
endif
ifeq ($(WITH_SILO), "true")
  LIBS += __WITH_SILO_LIBS__
endif
ifeq ($(WITH_MPITRACE), "true")
  LIBS += -lmpitrace
endif
LIBS += __WITH_FFT_LIBS__
LIBS += __WITH_GSL_LIBS__
LIBS += -lm


# The actual definitions depending on the chosen toolchain
ifeq ($(TOOLCHAIN), "gnu")
  ifndef CC
    ifeq ($(WITH_MPI), "true")
      CC = $(MPICC)
    else
      CC = gcc
    endif
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC+= -fopenmp
  endif
  CFLAGS += -Wall -std=c99
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -pg
  endif
  ifndef DEPCC
    ifeq ($(WITH_MPI), "true")
      DEPCC = $(MPICC)
    else
      DEPCC = gcc
    endif
  endif
  ifndef LD
    LD = ld
  endif
  ifndef AR
    AR = ar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif

ifeq ($(TOOLCHAIN), "intel")
  ifndef CC
    ifeq ($(WITH_MPI), "true")
      CC = $(MPICC)
    else
      CC = icc
    endif
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC+= -openmp
  endif
  CFLAGS += -Wall -std=c99 -Wcheck -wd981 -wd161
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -p
  endif
  ifndef DEPCC
    ifeq ($(WITH_MPI), "true")
      DEPCC = $(MPICC)
    else
      DEPCC = icc
    endif
  endif
  ifndef LD
    LD = xild
  endif
  ifndef AR
    AR = xiar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif

ifeq ($(TOOLCHAIN), "ibm")
  ifndef CC
    ifeq ($(WITH_MPI), "true")
      CC = $(MPICC)
    else
      CC = xlc
    endif
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC += -qsmp=omp -qthreaded
  else
    CC += -qsmp=noomp -qthreaded
  endif
  CFLAGS += -qlanglvl=stdc99
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -pg
  endif
  ifndef DEPCC
      # Always use gcc for this, xlc might need different flags to do
      # the same job.
      DEPCC = gcc
  endif
  ifndef LD
    LD = ld
  endif
  ifndef AR
    AR = ar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif
